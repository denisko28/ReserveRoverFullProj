// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using ReserveRoverDAL;

#nullable disable

namespace ReserveRoverDAL.Migrations
{
    [DbContext(typeof(ReserveRoverDbContext))]
    [Migration("20231115170335_SocialMediaMigration")]
    partial class SocialMediaMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ReserveRoverDAL.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("User1Id")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("character(28)")
                        .HasColumnName("user1_id")
                        .IsFixedLength();

                    b.Property<string>("User2Id")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("character(28)")
                        .HasColumnName("user2_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("chats_pkey");

                    b.HasIndex("User2Id");

                    b.HasIndex("User1Id", "User2Id")
                        .IsUnique();

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasMaxLength(120)
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("FromUserId")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("character(28)")
                        .HasColumnName("from_user_id")
                        .IsFixedLength();

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("message");

                    b.Property<bool>("Viewed")
                        .HasColumnType("boolean")
                        .HasColumnName("viewed");

                    b.HasKey("Id")
                        .HasName("chats_messages_pkey");

                    b.HasIndex("ChatId");

                    b.ToTable("chats_messages", (string)null);
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("cities_pkey");

                    b.ToTable("cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Київ"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Львів"
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean")
                        .HasColumnName("accepted");

                    b.Property<DateTime>("RequestedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("requested_date_time");

                    b.Property<string>("User1Id")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("character(28)")
                        .HasColumnName("user1_id")
                        .IsFixedLength();

                    b.Property<string>("User2Id")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("character(28)")
                        .HasColumnName("user2_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("friendships_pkey");

                    b.HasIndex("User2Id");

                    b.HasIndex("User1Id", "User2Id")
                        .IsUnique();

                    b.ToTable("friendships", (string)null);
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Location", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(8, 6)
                        .HasColumnType("numeric(8,6)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(8, 6)
                        .HasColumnType("numeric(8,6)")
                        .HasColumnName("longitude");

                    b.HasKey("PlaceId")
                        .HasName("locations_pkey");

                    b.ToTable("locations", (string)null);

                    b.HasData(
                        new
                        {
                            PlaceId = 1,
                            Latitude = 48.291845m,
                            Longitude = 25.930247m
                        },
                        new
                        {
                            PlaceId = 2,
                            Latitude = 48.290586m,
                            Longitude = 25.935982m
                        },
                        new
                        {
                            PlaceId = 3,
                            Latitude = 50.439802m,
                            Longitude = 30.538339m
                        },
                        new
                        {
                            PlaceId = 4,
                            Latitude = 50.421874m,
                            Longitude = 30.466707m
                        },
                        new
                        {
                            PlaceId = 5,
                            Latitude = 50.480726m,
                            Longitude = 30.604961m
                        },
                        new
                        {
                            PlaceId = 6,
                            Latitude = 49.840546m,
                            Longitude = 24.024734m
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Moderation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("ModeratorId")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("character(28)")
                        .HasColumnName("moderator_id")
                        .IsFixedLength();

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("moderation_pkey");

                    b.HasIndex("PlaceId");

                    b.ToTable("moderation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9c4a9b2-0994-4a02-baa1-d0e6aaf4a357"),
                            DateTime = new DateTime(2023, 3, 8, 11, 23, 4, 0, DateTimeKind.Unspecified),
                            ModeratorId = "Mod1",
                            PlaceId = 1,
                            Status = (short)2
                        },
                        new
                        {
                            Id = new Guid("17484fe0-88d7-41ca-9988-5a0bd9f6ce79"),
                            DateTime = new DateTime(2023, 3, 28, 9, 31, 46, 0, DateTimeKind.Unspecified),
                            ModeratorId = "Mod2",
                            PlaceId = 2,
                            Status = (short)2
                        },
                        new
                        {
                            Id = new Guid("002891be-7ebc-4c31-9ca0-1f42d38df160"),
                            DateTime = new DateTime(2023, 4, 2, 17, 20, 3, 0, DateTimeKind.Unspecified),
                            ModeratorId = "Mod1",
                            PlaceId = 3,
                            Status = (short)2
                        },
                        new
                        {
                            Id = new Guid("afddd193-3827-43bb-8077-39bdf34eaf9e"),
                            DateTime = new DateTime(2023, 4, 1, 16, 4, 15, 0, DateTimeKind.Unspecified),
                            ModeratorId = "Mod2",
                            PlaceId = 4,
                            Status = (short)1
                        },
                        new
                        {
                            Id = new Guid("5327d999-b744-4966-8cf2-d79a4e29e1ae"),
                            DateTime = new DateTime(2023, 4, 3, 10, 53, 6, 0, DateTimeKind.Unspecified),
                            ModeratorId = "Mod2",
                            PlaceId = 6,
                            Status = (short)2
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("address");

                    b.Property<decimal>("AvgBill")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)")
                        .HasColumnName("avg_bill");

                    b.Property<decimal?>("AvgMark")
                        .HasPrecision(2, 1)
                        .HasColumnType("numeric(2,1)")
                        .HasColumnName("avg_mark");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<TimeOnly>("ClosesAt")
                        .HasColumnType("time without time zone")
                        .HasColumnName("closes_at");

                    b.Property<short>("ImagesCount")
                        .HasColumnType("smallint");

                    b.Property<string>("MainImageUrl")
                        .IsRequired()
                        .HasMaxLength(105)
                        .HasColumnType("character varying(105)")
                        .HasColumnName("main_image_url");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("character(28)")
                        .HasColumnName("manager_id")
                        .IsFixedLength();

                    b.Property<short>("ModerationStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("moderation_status");

                    b.Property<TimeOnly>("OpensAt")
                        .HasColumnType("time without time zone")
                        .HasColumnName("opens_at");

                    b.Property<int>("Popularity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateOnly?>("PublicDate")
                        .HasColumnType("date")
                        .HasColumnName("public_date");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Title" });

                    b.Property<DateTime>("SubmissionDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("places_pkey");

                    b.HasIndex("CityId");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("places", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "вул. Заньковецької, 20",
                            AvgBill = 600m,
                            AvgMark = 4.7m,
                            CityId = 1,
                            ClosesAt = new TimeOnly(20, 0, 0),
                            ImagesCount = (short)3,
                            MainImageUrl = "https://assets.dots.live/misteram-public/1606a7ce-cf02-46c4-a097-7fe6759bde43.png",
                            ManagerId = "M1",
                            ModerationStatus = (short)2,
                            OpensAt = new TimeOnly(10, 0, 0),
                            Popularity = 4,
                            PublicDate = new DateOnly(2023, 3, 8),
                            SubmissionDateTime = new DateTime(2023, 3, 7, 7, 22, 16, 0, DateTimeKind.Unspecified),
                            Title = "Familia Grande"
                        },
                        new
                        {
                            Id = 2,
                            Address = "вул. Небесної сотні 5а",
                            AvgBill = 300m,
                            AvgMark = 4.25m,
                            CityId = 1,
                            ClosesAt = new TimeOnly(20, 0, 0),
                            ImagesCount = (short)2,
                            MainImageUrl = "https://assets.dots.live/misteram-public/0627f92845e66bd4fdb662e3e6129ccc.png",
                            ManagerId = "M2",
                            ModerationStatus = (short)2,
                            OpensAt = new TimeOnly(8, 0, 0),
                            Popularity = 2,
                            PublicDate = new DateOnly(2023, 3, 28),
                            SubmissionDateTime = new DateTime(2023, 3, 26, 18, 44, 9, 0, DateTimeKind.Unspecified),
                            Title = "Піца парк"
                        },
                        new
                        {
                            Id = 3,
                            Address = "вул. Івана Франка, 42Г",
                            AvgBill = 950m,
                            AvgMark = 4.8m,
                            CityId = 2,
                            ClosesAt = new TimeOnly(22, 0, 0),
                            ImagesCount = (short)2,
                            MainImageUrl = "https://assets.dots.live/misteram-public/2821669b-9921-4af9-acf8-a9b7e2e49a14.png",
                            ManagerId = "M3",
                            ModerationStatus = (short)2,
                            OpensAt = new TimeOnly(12, 0, 0),
                            Popularity = 12,
                            PublicDate = new DateOnly(2023, 4, 2),
                            SubmissionDateTime = new DateTime(2023, 4, 1, 14, 31, 57, 0, DateTimeKind.Unspecified),
                            Title = "Pang"
                        },
                        new
                        {
                            Id = 4,
                            Address = "вул. академіка Амосова, 96В",
                            AvgBill = 800m,
                            CityId = 2,
                            ClosesAt = new TimeOnly(22, 0, 0),
                            ImagesCount = (short)1,
                            MainImageUrl = "https://assets.dots.live/misteram-public/f1d85bcd-7b2f-4180-8a89-b55ad10fe019.png",
                            ManagerId = "M4",
                            ModerationStatus = (short)1,
                            OpensAt = new TimeOnly(10, 30, 0),
                            Popularity = 0,
                            SubmissionDateTime = new DateTime(2023, 4, 1, 11, 12, 19, 0, DateTimeKind.Unspecified),
                            Title = "LAPASTA"
                        },
                        new
                        {
                            Id = 5,
                            Address = "вул. Івана Мазепи, 17Е",
                            AvgBill = 400m,
                            CityId = 2,
                            ClosesAt = new TimeOnly(22, 0, 0),
                            ImagesCount = (short)2,
                            MainImageUrl = "https://assets.dots.live/misteram-public/7b5d6db7213f6e9d012f625024b94cb7.png",
                            ManagerId = "M5",
                            ModerationStatus = (short)0,
                            OpensAt = new TimeOnly(13, 0, 0),
                            Popularity = 0,
                            SubmissionDateTime = new DateTime(2023, 4, 2, 23, 43, 37, 0, DateTimeKind.Unspecified),
                            Title = "Пікантіко"
                        },
                        new
                        {
                            Id = 6,
                            Address = "вул. Січевих Стрільців, 119Б, заїзд з пр. Дорошенка",
                            AvgBill = 1250m,
                            AvgMark = 4.6m,
                            CityId = 3,
                            ClosesAt = new TimeOnly(21, 30, 0),
                            ImagesCount = (short)2,
                            MainImageUrl = "https://assets.dots.live/misteram-public/fd01592e-08b9-4058-bd77-dcfd74201b72.png",
                            ManagerId = "M6",
                            ModerationStatus = (short)2,
                            OpensAt = new TimeOnly(11, 30, 0),
                            Popularity = 3,
                            PublicDate = new DateOnly(2023, 4, 3),
                            SubmissionDateTime = new DateTime(2023, 4, 2, 16, 50, 28, 0, DateTimeKind.Unspecified),
                            Title = "Ребра та вогонь"
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.PlaceDescription", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)")
                        .HasColumnName("description");

                    b.HasKey("PlaceId")
                        .HasName("places_descriptions_pkey");

                    b.ToTable("places_descriptions", (string)null);

                    b.HasData(
                        new
                        {
                            PlaceId = 1,
                            Description = "Famiglia Grande – справжня Неаполітанська Піцерія,яка поєднує в собі найкращі традиції приготування піци.\n\nТільки справжня піч - ми випікаємо нашу піцу в справжній італійській печі при температурі 400 С, від всесвітньо відомого виробника. Завдяки цьому піца Famiglia Grande має досконалий неаполітанський смак. Спеціальне борошно - ми використовуємо італійське цільнозернове борошно найвищої якості. Воно створене спеціально для тіста тривалого визрівання, з додаванням закваски для ферментації. Саме тому піца Famiglia Grande така смачна та низькокалорійна.\n\nФерментоване тісто на заквасці - наше тісто визріває 32 години........... ! Фірмовий італійський соус Pomodoro - соус для нашої піци готується з очищених перетертих томатів, привезених прямо з сонячної Італії.Справжня італійська Моцарелла - традиційно входить до складу неаполітанської піци. Це молодий сир. У кожну піцу ми додаємо саме його. Піцайоло - смак нашої піци залежить від його вміння, досвіду та натхнення. Тому люди, які готують для Вас, пройшли відмінну школу у провідного майстра."
                        },
                        new
                        {
                            PlaceId = 2,
                            Description = "Ваші улюблені, перевірені часом страви, затишна атмосефера, фірмова піца.У нас смачно."
                        },
                        new
                        {
                            PlaceId = 3,
                            Description = "'Pang' - це в першу чергу про смак та турботу. Поняття азіатської кухні асоціюється з корисними свіжими продуктами, легкими стравами і маленькими смачними закусками. Азіатська кухня - це можливість експериментувати зі смаками і коштувати самі незвичайні поєднання продуктів, відкриваючи для себе незвичайний світ традицій та екзотики! З нами ти відчуєш усі відтінки смаків, від гострого до солодкого. Поринь в атмосферу східної культури!"
                        },
                        new
                        {
                            PlaceId = 4,
                            Description = "LAPASTA - енотека/пастерія. 👨🏻‍🍳🍕\nСімейний ресторан справжньої італійської кухні.\nВ нашому меню можна зустріти всю палітру смаків Італії.\nНаша піца - це кращі італійські традиції.\nГарячі страви та салати - невимовна насолода від шеф кухаря."
                        },
                        new
                        {
                            PlaceId = 5,
                            Description = "Пікантіко - смачна домашня кухня за помірними цінами. Великий асортимент пива: завжди свіже розливне крафтове пиво, від кращих пивоварень. Закуски до пива: свинні вушка, крендель, домашні чіпси, чебурек величезного розміру. Піцца на любий смак за помірними цінами."
                        },
                        new
                        {
                            PlaceId = 6,
                            Description = "Рецепт наших ребер ми випробовували аж три роки. А щоб вони були правдивими, ми розробили спеціальні мангали (єдині у своєму роді), що дозволяють готувати на відкритому вогні, аби ребра виходили зі скоринкою та присмаком диму. Як любиш готувати ребра самотужки – нема питань, можеш придбати наш маринад окремо. Смакує він добре, і не лише до ребер. Ми – демократичний заклад, тому тут не маємо посуду та їмо руками (ну, й так, зрештою, смачніше). І, певна річ, до нас вхід без краваток."
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.PlaceImage", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    b.Property<short>("SequenceIndex")
                        .HasColumnType("smallint")
                        .HasColumnName("sequence_index");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(105)
                        .HasColumnType("character varying(105)")
                        .HasColumnName("image_url");

                    b.HasKey("PlaceId", "SequenceIndex")
                        .HasName("place_images_pkey");

                    b.ToTable("place_images", (string)null);

                    b.HasData(
                        new
                        {
                            PlaceId = 1,
                            SequenceIndex = (short)0,
                            ImageUrl = "https://famigliagrande.ua/wp-content/uploads/2022/11/foto-prosciutto-pear11.jpg"
                        },
                        new
                        {
                            PlaceId = 1,
                            SequenceIndex = (short)1,
                            ImageUrl = "https://famigliagrande.ua/wp-content/uploads/2022/10/prosciuttopear.jpg"
                        },
                        new
                        {
                            PlaceId = 1,
                            SequenceIndex = (short)2,
                            ImageUrl = "https://famigliagrande.ua/wp-content/uploads/2022/10/foto-angel.jpg"
                        },
                        new
                        {
                            PlaceId = 2,
                            SequenceIndex = (short)0,
                            ImageUrl = "https://fastly.4sqi.net/img/general/600x600/186926302_7174fhsnxGKw_KYjrmEl6Mro1oz6NwjaygTiWZEsJUI.jpg"
                        },
                        new
                        {
                            PlaceId = 2,
                            SequenceIndex = (short)1,
                            ImageUrl = "https://fastly.4sqi.net/img/general/600x600/51690195_-M0XtE0y0jbTS9sUFC7C72Q9rXxVSUNqmpjuO6v6O_0.jpg"
                        },
                        new
                        {
                            PlaceId = 3,
                            SequenceIndex = (short)0,
                            ImageUrl = "https://assets.dots.live/misteram-public/f210f2ed-5e88-4ac6-8a88-d7bb1e8e0188-826x0.png"
                        },
                        new
                        {
                            PlaceId = 3,
                            SequenceIndex = (short)1,
                            ImageUrl = "https://travel.chernivtsi.ua/storage/posts/July2022/vxr25w9G6MqZd4qYRdiN.jpg"
                        },
                        new
                        {
                            PlaceId = 4,
                            SequenceIndex = (short)0,
                            ImageUrl = "https://lh3.googleusercontent.com/p/AF1QipO2b0cC1uaE836xZwwHE1OeiA_dDi_e41vL1UFt=w1080-h608-p-no-v0"
                        },
                        new
                        {
                            PlaceId = 5,
                            SequenceIndex = (short)0,
                            ImageUrl = "https://pyvtrest.com.ua/images/C43D7D64-90E1-418C-B4DE-F18C038D0F47.jpeg"
                        },
                        new
                        {
                            PlaceId = 5,
                            SequenceIndex = (short)1,
                            ImageUrl = "https://files.ratelist.top/uploads/images/bs/71875/photos/660872aa5b09e20adc70fdf8628f3e66-original.webp"
                        },
                        new
                        {
                            PlaceId = 6,
                            SequenceIndex = (short)0,
                            ImageUrl = "https://lh3.googleusercontent.com/p/AF1QipNdBerwXQBA6Ltb4Am5snYPi2e0Ph2lvtu4Io_S=s1360-w1360-h1020"
                        },
                        new
                        {
                            PlaceId = 6,
                            SequenceIndex = (short)1,
                            ImageUrl = "https://onedeal.com.ua/wp-content/uploads/2021/02/2018-07-17-4-1.jpg"
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.PlacePaymentMethod", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    b.Property<short>("Method")
                        .HasColumnType("smallint")
                        .HasColumnName("method");

                    b.HasKey("PlaceId", "Method")
                        .HasName("place_payment_methods_pkey");

                    b.ToTable("place_payment_methods", (string)null);

                    b.HasData(
                        new
                        {
                            PlaceId = 1,
                            Method = (short)0
                        },
                        new
                        {
                            PlaceId = 1,
                            Method = (short)1
                        },
                        new
                        {
                            PlaceId = 2,
                            Method = (short)0
                        },
                        new
                        {
                            PlaceId = 3,
                            Method = (short)0
                        },
                        new
                        {
                            PlaceId = 3,
                            Method = (short)1
                        },
                        new
                        {
                            PlaceId = 4,
                            Method = (short)0
                        },
                        new
                        {
                            PlaceId = 4,
                            Method = (short)1
                        },
                        new
                        {
                            PlaceId = 5,
                            Method = (short)0
                        },
                        new
                        {
                            PlaceId = 6,
                            Method = (short)0
                        },
                        new
                        {
                            PlaceId = 6,
                            Method = (short)1
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.PublicUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(28)
                        .HasColumnType("character(28)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("Avatar")
                        .HasMaxLength(170)
                        .HasColumnType("character varying(170)")
                        .HasColumnName("avatar");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("public_users_pkey");

                    b.ToTable("public_users", (string)null);
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<TimeOnly>("BeginTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("begin_time");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<short>("PeopleNum")
                        .HasColumnType("smallint")
                        .HasColumnName("people_num");

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("ReservDate")
                        .HasColumnType("date")
                        .HasColumnName("reserv_date");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<int>("TableSetId")
                        .HasColumnType("integer")
                        .HasColumnName("table_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("character(28)")
                        .HasColumnName("user_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("reservations_pkey");

                    b.HasIndex("TableSetId");

                    b.ToTable("reservations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ee6dc11-e340-480f-926f-1601b685fe16"),
                            BeginTime = new TimeOnly(10, 0, 0),
                            CreationDateTime = new DateTime(2023, 4, 10, 7, 20, 58, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(12, 0, 0),
                            PeopleNum = (short)2,
                            PlaceId = 1,
                            ReservDate = new DateOnly(2023, 4, 26),
                            Status = (short)0,
                            TableSetId = 1,
                            UserId = "U1"
                        },
                        new
                        {
                            Id = new Guid("c9939799-c579-4928-9657-c85c669dc3d7"),
                            BeginTime = new TimeOnly(10, 30, 0),
                            CreationDateTime = new DateTime(2023, 4, 5, 17, 3, 34, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(11, 30, 0),
                            PeopleNum = (short)2,
                            PlaceId = 1,
                            ReservDate = new DateOnly(2023, 4, 26),
                            Status = (short)0,
                            TableSetId = 1,
                            UserId = "U2"
                        },
                        new
                        {
                            Id = new Guid("d0dc4aa6-e767-4edf-aa52-5aa7de0c65f4"),
                            BeginTime = new TimeOnly(14, 30, 0),
                            CreationDateTime = new DateTime(2023, 4, 8, 16, 18, 2, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(16, 30, 0),
                            PeopleNum = (short)2,
                            PlaceId = 1,
                            ReservDate = new DateOnly(2023, 4, 26),
                            Status = (short)0,
                            TableSetId = 1,
                            UserId = "U3"
                        },
                        new
                        {
                            Id = new Guid("8c2065e5-4cc5-4a35-8070-4c424d30cc9f"),
                            BeginTime = new TimeOnly(12, 0, 0),
                            CreationDateTime = new DateTime(2023, 4, 16, 21, 46, 27, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(14, 0, 0),
                            PeopleNum = (short)2,
                            PlaceId = 1,
                            ReservDate = new DateOnly(2023, 4, 26),
                            Status = (short)0,
                            TableSetId = 1,
                            UserId = "U4"
                        },
                        new
                        {
                            Id = new Guid("e2f3c305-e84b-4716-9c61-f3a3f18eaede"),
                            BeginTime = new TimeOnly(13, 0, 0),
                            CreationDateTime = new DateTime(2023, 4, 19, 13, 6, 12, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(15, 0, 0),
                            PeopleNum = (short)2,
                            PlaceId = 1,
                            ReservDate = new DateOnly(2023, 4, 26),
                            Status = (short)0,
                            TableSetId = 1,
                            UserId = "U5"
                        },
                        new
                        {
                            Id = new Guid("34412304-db23-4e5e-af68-01dc20546d89"),
                            BeginTime = new TimeOnly(14, 0, 0),
                            CreationDateTime = new DateTime(2023, 4, 21, 18, 15, 53, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(16, 0, 0),
                            PeopleNum = (short)2,
                            PlaceId = 1,
                            ReservDate = new DateOnly(2023, 4, 26),
                            Status = (short)0,
                            TableSetId = 1,
                            UserId = "U60"
                        },
                        new
                        {
                            Id = new Guid("35b3057d-4de9-43b1-8a45-fe920a0f7114"),
                            BeginTime = new TimeOnly(11, 30, 0),
                            CreationDateTime = new DateTime(2023, 4, 5, 19, 46, 11, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(13, 0, 0),
                            PeopleNum = (short)2,
                            PlaceId = 6,
                            ReservDate = new DateOnly(2023, 4, 9),
                            Status = (short)0,
                            TableSetId = 15,
                            UserId = "U6"
                        },
                        new
                        {
                            Id = new Guid("4df7985b-c640-4ca0-89fd-8f6378e91ee0"),
                            BeginTime = new TimeOnly(14, 0, 0),
                            CreationDateTime = new DateTime(2023, 4, 9, 8, 57, 15, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(16, 0, 0),
                            PeopleNum = (short)4,
                            PlaceId = 6,
                            ReservDate = new DateOnly(2023, 4, 10),
                            Status = (short)0,
                            TableSetId = 16,
                            UserId = "U7"
                        },
                        new
                        {
                            Id = new Guid("a53bb0c7-e667-4ccd-b28d-3758e43e1364"),
                            BeginTime = new TimeOnly(14, 0, 0),
                            CreationDateTime = new DateTime(2023, 4, 11, 15, 7, 4, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(16, 0, 0),
                            PeopleNum = (short)2,
                            PlaceId = 6,
                            ReservDate = new DateOnly(2023, 4, 17),
                            Status = (short)1,
                            TableSetId = 15,
                            UserId = "U8"
                        },
                        new
                        {
                            Id = new Guid("1e68496d-8f1c-49e7-b8bd-213c81ebaf4e"),
                            BeginTime = new TimeOnly(16, 0, 0),
                            CreationDateTime = new DateTime(2023, 4, 20, 23, 42, 9, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(18, 30, 0),
                            PeopleNum = (short)5,
                            PlaceId = 6,
                            ReservDate = new DateOnly(2023, 4, 29),
                            Status = (short)0,
                            TableSetId = 17,
                            UserId = "U9"
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("character(28)")
                        .HasColumnName("author_id")
                        .IsFixedLength();

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("comment");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date")
                        .HasColumnName("creation_date");

                    b.Property<decimal>("Mark")
                        .HasPrecision(1)
                        .HasColumnType("numeric(1)")
                        .HasColumnName("mark");

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    b.HasKey("Id")
                        .HasName("reviews_pkey");

                    b.HasIndex("PlaceId");

                    b.ToTable("reviews", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("71dec40b-7482-45a4-83fe-906a24ccda81"),
                            AuthorId = "CCK7UNofA4XUpaSRC5W3RdNoMxm2",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 9),
                            Mark = 5m,
                            PlaceId = 3
                        },
                        new
                        {
                            Id = new Guid("b44ceb88-9c53-4da8-a7c4-e9379ace81b7"),
                            AuthorId = "vHqgNXnqfcQqILCTRrC1qm2kfMh1",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 11),
                            Mark = 5m,
                            PlaceId = 3
                        },
                        new
                        {
                            Id = new Guid("679e0ee6-ae73-489f-be1e-a41ed24be435"),
                            AuthorId = "vHqgNXnqfcQqILCTRrC1qm2kfMh1",
                            Comment = "Піца смачна, атмосфера в закладі приємна, але варто було б трохи оновити інтер'єр.",
                            CreationDate = new DateOnly(2023, 4, 11),
                            Mark = 4m,
                            PlaceId = 2
                        },
                        new
                        {
                            Id = new Guid("fd8f025a-d198-4dbd-8c88-15e737aed73f"),
                            AuthorId = "L31xc7GbqoVTjPFlyyWjDFqhc6u1",
                            Comment = "Сама смачна піцца в Че. Я ваш клієнт на віки-вічні",
                            CreationDate = new DateOnly(2023, 4, 12),
                            Mark = 5m,
                            PlaceId = 1
                        },
                        new
                        {
                            Id = new Guid("a42ac86c-4cca-4b3b-9a06-c2aa2bb1f0b9"),
                            AuthorId = "En6jfcgABnQqw5wNBIpHLvMlB102",
                            Comment = "Піца була смачна. Рекомендую)",
                            CreationDate = new DateOnly(2023, 4, 13),
                            Mark = 5m,
                            PlaceId = 3
                        },
                        new
                        {
                            Id = new Guid("38bbd354-8222-46a5-9861-5288d316b11f"),
                            AuthorId = "En6jfcgABnQqw5wNBIpHLvMlB102",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 14),
                            Mark = 5m,
                            PlaceId = 1
                        },
                        new
                        {
                            Id = new Guid("89261258-039f-4d7a-8f29-e1296e040681"),
                            AuthorId = "TWkGRrgJeiRbBxFHepdxr5Ye0Rl1",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 17),
                            Mark = 5m,
                            PlaceId = 1
                        },
                        new
                        {
                            Id = new Guid("ffc45953-fe64-44e5-8813-62a91bdca4a1"),
                            AuthorId = "vHqgNXnqfcQqILCTRrC1qm2kfMh1",
                            Comment = "Вже другий раз не дають прибори.",
                            CreationDate = new DateOnly(2023, 4, 18),
                            Mark = 4m,
                            PlaceId = 1
                        },
                        new
                        {
                            Id = new Guid("a5cdc317-80ba-4e47-aedd-cb11887a8d2b"),
                            AuthorId = "D7Cy0pTcq0NszfWnTiiqLyfh0eI3",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 5),
                            Mark = 5m,
                            PlaceId = 3
                        },
                        new
                        {
                            Id = new Guid("d512da1b-76b1-4604-ad39-54c8dea1794d"),
                            AuthorId = "8M8DY0scwgR9gfbCvvzfXM6FnQ53",
                            Comment = "Страви не підписані, мусили вгадувати.",
                            CreationDate = new DateOnly(2023, 4, 14),
                            Mark = 4m,
                            PlaceId = 3
                        },
                        new
                        {
                            Id = new Guid("81d19b62-2f94-4455-8f24-908eb3e010cf"),
                            AuthorId = "D7Cy0pTcq0NszfWnTiiqLyfh0eI3",
                            Comment = "Піца по бувовинськи - це смак мого дитинства. Смачно, швидко, бюджетно.",
                            CreationDate = new DateOnly(2023, 4, 15),
                            Mark = 5m,
                            PlaceId = 2
                        },
                        new
                        {
                            Id = new Guid("580c00c4-f33c-454e-95df-befe5b7fdf82"),
                            AuthorId = "jidZO6WQMiYOSRIEE5ONUREmRpd2",
                            Comment = "На жаль, не сподобалось, окрошка була пересолена, овочі в салаті в'ялі...",
                            CreationDate = new DateOnly(2023, 5, 3),
                            Mark = 3m,
                            PlaceId = 2
                        },
                        new
                        {
                            Id = new Guid("82b12f7a-5762-44a6-ad88-344e38adcfcd"),
                            AuthorId = "8M8DY0scwgR9gfbCvvzfXM6FnQ53",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 5, 7),
                            Mark = 5m,
                            PlaceId = 2
                        },
                        new
                        {
                            Id = new Guid("89d99ce3-5d78-4e95-9593-b66e3c6242e3"),
                            AuthorId = "8M8DY0scwgR9gfbCvvzfXM6FnQ53",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 4),
                            Mark = 5m,
                            PlaceId = 6
                        },
                        new
                        {
                            Id = new Guid("f1f507de-0385-4ecc-bd99-1e220647378c"),
                            AuthorId = "Q37k5ec7ccWjWuk7mPwMOQr3hoy2",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 8),
                            Mark = 4m,
                            PlaceId = 6
                        },
                        new
                        {
                            Id = new Guid("deff1ec1-9ffa-4254-b559-91da46126f0d"),
                            AuthorId = "L31xc7GbqoVTjPFlyyWjDFqhc6u1",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 9),
                            Mark = 5m,
                            PlaceId = 6
                        },
                        new
                        {
                            Id = new Guid("5ace1260-0027-4136-9685-610d81a2a228"),
                            AuthorId = "D7Cy0pTcq0NszfWnTiiqLyfh0eI3",
                            Comment = "Копчене курча бездоганне, а от свиня за життя займалася фітнесом, міцна та підтягнута занадто)",
                            CreationDate = new DateOnly(2023, 4, 11),
                            Mark = 5m,
                            PlaceId = 6
                        },
                        new
                        {
                            Id = new Guid("a79ef70f-9ab8-4bc9-8363-fe6a9e78eb18"),
                            AuthorId = "CCK7UNofA4XUpaSRC5W3RdNoMxm2",
                            Comment = "Такої смачної їжі давно не куштувала",
                            CreationDate = new DateOnly(2023, 4, 12),
                            Mark = 5m,
                            PlaceId = 6
                        },
                        new
                        {
                            Id = new Guid("a9c01746-4b3b-4ca8-8995-3038da2147a8"),
                            AuthorId = "TWkGRrgJeiRbBxFHepdxr5Ye0Rl1",
                            Comment = "Шашлик з купою жил, сала, ледь жувався.",
                            CreationDate = new DateOnly(2023, 4, 16),
                            Mark = 3m,
                            PlaceId = 6
                        },
                        new
                        {
                            Id = new Guid("47200fe9-0260-4d3f-a3b8-17855a977379"),
                            AuthorId = "jidZO6WQMiYOSRIEE5ONUREmRpd2",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 16),
                            Mark = 5m,
                            PlaceId = 6
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.TableSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    b.Property<short>("TableCapacity")
                        .HasColumnType("smallint")
                        .HasColumnName("table_type");

                    b.Property<short>("TablesNum")
                        .HasColumnType("smallint")
                        .HasColumnName("tables_num");

                    b.HasKey("Id")
                        .HasName("tables_pkey");

                    b.HasIndex("PlaceId");

                    b.ToTable("tables", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PlaceId = 1,
                            TableCapacity = (short)2,
                            TablesNum = (short)3
                        },
                        new
                        {
                            Id = 2,
                            PlaceId = 1,
                            TableCapacity = (short)3,
                            TablesNum = (short)2
                        },
                        new
                        {
                            Id = 3,
                            PlaceId = 1,
                            TableCapacity = (short)4,
                            TablesNum = (short)3
                        },
                        new
                        {
                            Id = 4,
                            PlaceId = 1,
                            TableCapacity = (short)6,
                            TablesNum = (short)1
                        },
                        new
                        {
                            Id = 5,
                            PlaceId = 2,
                            TableCapacity = (short)2,
                            TablesNum = (short)4
                        },
                        new
                        {
                            Id = 6,
                            PlaceId = 2,
                            TableCapacity = (short)4,
                            TablesNum = (short)5
                        },
                        new
                        {
                            Id = 7,
                            PlaceId = 3,
                            TableCapacity = (short)3,
                            TablesNum = (short)3
                        },
                        new
                        {
                            Id = 8,
                            PlaceId = 3,
                            TableCapacity = (short)4,
                            TablesNum = (short)4
                        },
                        new
                        {
                            Id = 9,
                            PlaceId = 3,
                            TableCapacity = (short)6,
                            TablesNum = (short)2
                        },
                        new
                        {
                            Id = 10,
                            PlaceId = 4,
                            TableCapacity = (short)1,
                            TablesNum = (short)3
                        },
                        new
                        {
                            Id = 11,
                            PlaceId = 4,
                            TableCapacity = (short)2,
                            TablesNum = (short)4
                        },
                        new
                        {
                            Id = 12,
                            PlaceId = 5,
                            TableCapacity = (short)2,
                            TablesNum = (short)3
                        },
                        new
                        {
                            Id = 13,
                            PlaceId = 5,
                            TableCapacity = (short)4,
                            TablesNum = (short)2
                        },
                        new
                        {
                            Id = 14,
                            PlaceId = 5,
                            TableCapacity = (short)5,
                            TablesNum = (short)2
                        },
                        new
                        {
                            Id = 15,
                            PlaceId = 6,
                            TableCapacity = (short)2,
                            TablesNum = (short)6
                        },
                        new
                        {
                            Id = 16,
                            PlaceId = 6,
                            TableCapacity = (short)4,
                            TablesNum = (short)4
                        },
                        new
                        {
                            Id = 17,
                            PlaceId = 6,
                            TableCapacity = (short)5,
                            TablesNum = (short)1
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Chat", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.PublicUser", "User1")
                        .WithMany("ChatsUser1")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("chat_public_user1_fkey");

                    b.HasOne("ReserveRoverDAL.Entities.PublicUser", "User2")
                        .WithMany("ChatsUser2")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("chat_public_user2_fkey");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.ChatMessage", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.Chat", "Chat")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_chat_messages_id_fkey");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Friendship", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.PublicUser", "User1")
                        .WithMany("FriendshipsUser1")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("friendship_public_user1_fkey");

                    b.HasOne("ReserveRoverDAL.Entities.PublicUser", "User2")
                        .WithMany("FriendshipsUser2")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("friendship_public_user2_fkey");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Location", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.Place", "Place")
                        .WithOne("Location")
                        .HasForeignKey("ReserveRoverDAL.Entities.Location", "PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("locations_place_id_fkey");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Moderation", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.Place", "Place")
                        .WithMany("Moderations")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("moderation_place_id_fkey");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Place", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.City", "City")
                        .WithMany("Places")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("places_city_id_fkey");

                    b.Navigation("City");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.PlaceDescription", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.Place", "Place")
                        .WithOne("PlaceDescription")
                        .HasForeignKey("ReserveRoverDAL.Entities.PlaceDescription", "PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("places_descriptions_place_id_fkey");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.PlaceImage", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.Place", "Place")
                        .WithMany("PlaceImages")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("place_images_place_id_fkey");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.PlacePaymentMethod", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.Place", "Place")
                        .WithMany("PlacePaymentMethods")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("place_payment_methods_place_id_fkey");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Reservation", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.TableSet", "TableSet")
                        .WithMany("Reservations")
                        .HasForeignKey("TableSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reservations_table_id_fkey");

                    b.Navigation("TableSet");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Review", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.Place", "Place")
                        .WithMany("Reviews")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reviews_place_id_fkey");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.TableSet", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.Place", "Place")
                        .WithMany("TableSets")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tables_place_id_fkey");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Chat", b =>
                {
                    b.Navigation("ChatMessages");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.City", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Place", b =>
                {
                    b.Navigation("Location");

                    b.Navigation("Moderations");

                    b.Navigation("PlaceDescription")
                        .IsRequired();

                    b.Navigation("PlaceImages");

                    b.Navigation("PlacePaymentMethods");

                    b.Navigation("Reviews");

                    b.Navigation("TableSets");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.PublicUser", b =>
                {
                    b.Navigation("ChatsUser1");

                    b.Navigation("ChatsUser2");

                    b.Navigation("FriendshipsUser1");

                    b.Navigation("FriendshipsUser2");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.TableSet", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
